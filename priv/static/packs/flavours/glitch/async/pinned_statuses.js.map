{"version":3,"sources":["webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/flavours/glitch/features/pinned_statuses/index.js"],"names":["messages","defineMessages","heading","PinnedStatuses","connect","state","statusIds","getIn","hasMore","injectIntl","column","scrollTop","c","componentWillMount","this","props","dispatch","fetchPinnedStatuses","render","intl","multiColumn","bindToDocument","icon","formatMessage","ref","setRef","scrollKey","ImmutablePureComponent","PropTypes","func","isRequired","ImmutablePropTypes","list","object","bool"],"mappings":"ySAWA,IAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,iDAUHC,EAFUC,mBALQ,SAAAC,GAAK,MAAK,CAChCC,UAAWD,EAAME,MAAM,CAAC,eAAgB,OAAQ,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,OAAQ,Y,GAIjDE,a,kOAeqB,WAClB,EAAKC,OAAOC,e,qCAGL,SAAAC,GACP,EAAKF,OAASE,K,6BAThBC,mBAAA,WACEC,KAAKC,MAAMC,SAASC,gB,EAWtBC,OAAA,WAAW,IAAD,EAC0CJ,KAAKC,MAA/CI,EADA,EACAA,KAAMb,EADN,EACMA,UAAWE,EADjB,EACiBA,QAASY,EAD1B,EAC0BA,YAElC,OACE,kBAAC,IAAD,CAAQC,gBAAiBD,EAAaE,KAAK,aAAapB,QAASiB,EAAKI,cAAcvB,EAASE,SAAUsB,IAAKV,KAAKW,QAC/G,YAAC,IAAD,IACA,YAAC,IAAD,CACEnB,UAAWA,EACXoB,UAAU,kBACVlB,QAASA,EACTa,gBAAiBD,O,GAhCEO,K,0BAER,CACjBX,SAAUY,IAAUC,KAAKC,WACzBxB,UAAWyB,IAAmBC,KAAKF,WACnCX,KAAMS,IAAUK,OAAOH,WACvBtB,QAASoB,IAAUM,KAAKJ,WACxBV,YAAaQ,IAAUM,O","file":"flavours/glitch/async/pinned_statuses.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchPinnedStatuses } from 'flavours/glitch/actions/pin_statuses';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnBackButtonSlim from 'flavours/glitch/components/column_back_button_slim';\nimport StatusList from 'flavours/glitch/components/status_list';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  heading: { id: 'column.pins', defaultMessage: 'Pinned toot' },\n});\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'pins', 'items']),\n  hasMore: !!state.getIn(['status_lists', 'pins', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PinnedStatuses extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasMore: PropTypes.bool.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchPinnedStatuses());\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { intl, statusIds, hasMore, multiColumn } = this.props;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='thumb-tack' heading={intl.formatMessage(messages.heading)} ref={this.setRef}>\n        <ColumnBackButtonSlim />\n        <StatusList\n          statusIds={statusIds}\n          scrollKey='pinned_statuses'\n          hasMore={hasMore}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}