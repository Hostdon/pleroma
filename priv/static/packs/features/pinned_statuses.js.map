{"version":3,"sources":["webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/features/pinned_statuses/index.js"],"names":["messages","defineMessages","heading","PinnedStatuses","connect","state","statusIds","getIn","hasMore","injectIntl","column","scrollTop","c","componentWillMount","this","props","dispatch","fetchPinnedStatuses","render","intl","shouldUpdateScroll","multiColumn","bindToDocument","icon","formatMessage","ref","setRef","scrollKey","ImmutablePureComponent","PropTypes","func","isRequired","ImmutablePropTypes","list","object","bool"],"mappings":"ySAWA,IAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,iDAUHC,EAFUC,mBALQ,SAAAC,GAAK,MAAK,CAChCC,UAAWD,EAAME,MAAM,CAAC,eAAgB,OAAQ,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,OAAQ,Y,GAIjDE,a,kOAgBqB,WAClB,EAAKC,OAAOC,e,qCAGL,SAAAC,GACP,EAAKF,OAASE,K,6BAThBC,mBAAA,WACEC,KAAKC,MAAMC,SAASC,gB,EAWtBC,OAAA,WAAW,IAAD,EAC8DJ,KAAKC,MAAnEI,EADA,EACAA,KAAMC,EADN,EACMA,mBAAoBd,EAD1B,EAC0BA,UAAWE,EADrC,EACqCA,QAASa,EAD9C,EAC8CA,YAEtD,OACE,kBAAC,IAAD,CAAQC,gBAAiBD,EAAaE,KAAK,aAAarB,QAASiB,EAAKK,cAAcxB,EAASE,SAAUuB,IAAKX,KAAKY,QAC/G,YAAC,IAAD,IACA,YAAC,IAAD,CACEpB,UAAWA,EACXqB,UAAU,kBACVnB,QAASA,EACTY,mBAAoBA,EACpBE,gBAAiBD,O,GAlCEO,K,0BAER,CACjBZ,SAAUa,IAAUC,KAAKC,WACzBX,mBAAoBS,IAAUC,KAC9BxB,UAAW0B,IAAmBC,KAAKF,WACnCZ,KAAMU,IAAUK,OAAOH,WACvBvB,QAASqB,IAAUM,KAAKJ,WACxBV,YAAaQ,IAAUM,O","file":"features/pinned_statuses.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchPinnedStatuses } from '../../actions/pin_statuses';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport StatusList from '../../components/status_list';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  heading: { id: 'column.pins', defaultMessage: 'Pinned toot' },\n});\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'pins', 'items']),\n  hasMore: !!state.getIn(['status_lists', 'pins', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PinnedStatuses extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    statusIds: ImmutablePropTypes.list.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasMore: PropTypes.bool.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchPinnedStatuses());\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, statusIds, hasMore, multiColumn } = this.props;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='thumb-tack' heading={intl.formatMessage(messages.heading)} ref={this.setRef}>\n        <ColumnBackButtonSlim />\n        <StatusList\n          statusIds={statusIds}\n          scrollKey='pinned_statuses'\n          hasMore={hasMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          bindToDocument={!multiColumn}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}