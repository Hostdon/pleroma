{"version":3,"sources":["webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/components/domain.js","webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/containers/domain_container.js","webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/features/domain_blocks/index.js"],"names":["messages","defineMessages","unblockDomain","Account","injectIntl","props","onUnblockDomain","domain","render","this","intl","className","active","icon","title","formatMessage","onClick","handleDomainUnblock","ImmutablePureComponent","PropTypes","string","func","isRequired","object","blockDomainConfirm","connect","dispatch","onBlockDomain","openModal","message","id","defaultMessage","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","state","domains","getIn","hasMore","expandDomainBlocks","leading","componentWillMount","fetchDomainBlocks","shouldUpdateScroll","multiColumn","emptyMessage","bindToDocument","scrollKey","onLoadMore","handleLoadMore","map","params","bool","ImmutablePropTypes","orderedSet"],"mappings":"uTAMA,I,MAAMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,wEAITC,EADUC,a,oOASQ,WACpB,EAAKC,MAAMC,gBAAgB,EAAKD,MAAME,W,qBAGxCC,OAAA,WAAW,IAAD,EACiBC,KAAKJ,MAAtBE,EADA,EACAA,OAAQG,EADR,EACQA,KAEhB,OACE,mBAAKC,UAAU,eAAf,EACE,mBAAKA,UAAU,wBAAf,EACE,oBAAMA,UAAU,4BAAhB,EACE,+BAASJ,IAGX,mBAAKI,UAAU,wBAAf,EACE,YAAC,IAAD,CAAYC,QAAM,EAACC,KAAK,SAASC,MAAOJ,EAAKK,cAAcf,EAASE,cAAe,CAAEK,WAAWS,QAASP,KAAKQ,2B,GAvBpGC,K,0BAED,CACjBX,OAAQY,IAAUC,OAClBd,gBAAiBa,IAAUE,KAAKC,WAChCZ,KAAMS,IAAUI,OAAOD,a,iBCTrBtB,EAAWC,YAAe,CAC9BuB,mBAAmB,CAAD,gFAuBLpB,cAAWqB,mBApBE,WAG1B,OAFwB,iBAAO,OAKN,SAACC,EAAD,OAAahB,EAAb,EAAaA,KAAb,MAAyB,CAClDiB,cADkD,SACnCpB,GACbmB,EAASE,YAAU,UAAW,CAC5BC,QAAS,YAAC,IAAD,CAAkBC,GAAG,qCAAqCC,eAAe,iJAAiJC,OAAQ,CAAEzB,OAAQ,+BAASA,MAC9P0B,QAASvB,EAAKK,cAAcf,EAASwB,oBACrCU,UAAW,kBAAMR,EAASS,YAAY5B,SAI1CD,gBATkD,SASjCC,GACfmB,EAASxB,YAAcK,QAIDkB,CAAiDW,I,UCjB3E,IAAMpC,EAAWC,YAAe,CAC9BoC,QAAQ,CAAD,4DACPnC,cAAc,CAAD,wEAUToC,EAFUb,mBALQ,SAAAc,GAAK,MAAK,CAChCC,QAASD,EAAME,MAAM,CAAC,eAAgB,SAAU,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,SAAU,Y,GAInDrC,a,8NAiBkB,KAAS,WACxB,EAAKC,MAAMqB,SAASiB,iBACnB,IAAK,CAAEC,SAAS,K,6BANnBC,mBAAA,WACEpC,KAAKJ,MAAMqB,SAASoB,gB,EAOtBtC,OAAA,WAAW,IAAD,EAC4DC,KAAKJ,MAAjEK,EADA,EACAA,KAAM8B,EADN,EACMA,QAASO,EADf,EACeA,mBAAoBL,EADnC,EACmCA,QAASM,EAD5C,EAC4CA,YAEpD,IAAKR,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMS,EAAe,YAAC,IAAD,CAAkBnB,GAAG,6BAA6BC,eAAe,sCAEtF,OACE,YAAC,IAAD,CAAQmB,gBAAiBF,EAAanC,KAAK,eAAewB,QAAS3B,EAAKK,cAAcf,EAASqC,eAA/F,EACE,YAAC,IAAD,IACA,YAAC,IAAD,CACEc,UAAU,gBACVC,WAAY3C,KAAK4C,eACjBX,QAASA,EACTK,mBAAoBA,EACpBE,aAAcA,EACdC,gBAAiBF,QANnB,EAQGR,EAAQc,KAAI,SAAA/C,GAAM,OACjB,YAAC,EAAD,CAA8BA,OAAQA,GAAhBA,U,GA7CbW,K,0BAEA,CACjBqC,OAAQpC,IAAUI,OAAOD,WACzBI,SAAUP,IAAUE,KAAKC,WACzByB,mBAAoB5B,IAAUE,KAC9BqB,QAASvB,IAAUqC,KACnBhB,QAASiB,IAAmBC,WAC5BhD,KAAMS,IAAUI,OAAOD,WACvB0B,YAAa7B,IAAUqC,O","file":"features/domain_blocks.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, shouldUpdateScroll, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}